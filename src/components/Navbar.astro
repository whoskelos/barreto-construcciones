---
import { Image } from "astro:assets";
import { menu } from "@data";

import Logo from "@assets/img/logo.webp";

const currentPath = Astro.url.pathname;
---

<nav class="w-full bg-white shadow-sm border-b border-neutral-200">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-20">
            <!-- Logo -->
            <div class="flex-shrink-0">
                <a href="/" class="flex items-center">
                    <Image
                        src={Logo}
                        alt="Barreto Construcciones Logo"
                        width={150}
                        height={50}
                        transition:persist="logo"
                        loading="eager"
                    />
                </a>
            </div>

            <!-- Desktop Navigation -->
            <div class="hidden lg:flex lg:items-center lg:space-x-1 relative" id="desktop-nav">
                <div class="nav-bg-slider absolute rounded-lg bg-primary-50 transition-all duration-300 ease-out opacity-0"></div>
                {
                    menu.map((item, index) => (
                        <div class="relative group">
                            <a
                                href={item.link}
                                data-nav-index={index}
                                class={`nav-link relative z-10 px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 flex items-center gap-1
                ${
                    currentPath === item.link
                        ? "text-primary-600"
                        : "text-neutral-900 hover:text-primary-600"
                }`}
                            >
                                {item.name}
                                {item.submenu && (
                                    <svg
                                        class="w-4 h-4 transition-transform duration-200 group-hover:rotate-180"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                    >
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M19 9l-7 7-7-7"
                                        />
                                    </svg>
                                )}
                            </a>

                            {item.submenu && (
                                <div class="absolute left-0 mt-1 w-56 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
                                    <div class="bg-white rounded-lg shadow-lg border border-neutral-200 py-2">
                                        {item.submenu.map((subitem) => (
                                            <a
                                                href={subitem.link}
                                                class={`block px-4 py-2.5 text-sm transition-colors duration-150
                        ${
                            currentPath === subitem.link
                                ? "text-primary-600 bg-primary-50 border-l-3 border-primary-600"
                                : "text-neutral-900 hover:text-primary-600 hover:bg-neutral-50 border-l-3 border-transparent"
                        }`}
                                            >
                                                {subitem.name}
                                            </a>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                    ))
                }
            </div>

            <!-- CTA Button Desktop -->
            <div class="hidden lg:flex lg:items-center">
                <a
                    href="/contacto"
                    class="px-6 py-2.5 bg-primary-600 text-white text-sm font-medium rounded-lg hover:bg-primary-700 transition-colors duration-200 shadow-sm"
                >
                    Solicitar Presupuesto
                </a>
            </div>

            <!-- Mobile menu button -->
            <div class="lg:hidden">
                <button
                    id="mobile-menu-button"
                    type="button"
                    class="inline-flex items-center justify-center p-2 rounded-lg text-neutral-900 hover:text-primary-600 hover:bg-neutral-50 transition-colors duration-200"
                    aria-expanded="false"
                >
                    <span class="sr-only">Abrir men√∫</span>
                    <svg
                        id="menu-icon"
                        class="block h-6 w-6"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M4 6h16M4 12h16M4 18h16"></path>
                    </svg>
                    <svg
                        id="close-icon"
                        class="hidden h-6 w-6"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Mobile menu -->
    <div id="mobile-menu" class="hidden lg:hidden border-t border-neutral-200">
        <div class="px-4 py-4 space-y-1">
            {
                menu.map((item) => (
                    <div>
                        {item.submenu ? (
                            <div>
                                <button
                                    class="mobile-submenu-button w-full flex items-center justify-between px-4 py-3 text-base font-medium text-neutral-900 hover:text-primary-600 hover:bg-neutral-50 rounded-lg transition-colors duration-200"
                                    data-submenu={item.name.toLowerCase()}
                                >
                                    {item.name}
                                    <svg
                                        class="submenu-arrow w-5 h-5 transition-transform duration-200"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                    >
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M19 9l-7 7-7-7"
                                        />
                                    </svg>
                                </button>
                                <div
                                    class="mobile-submenu hidden pl-4 mt-1 space-y-1"
                                    data-submenu={item.name.toLowerCase()}
                                >
                                    {item.submenu.map((subitem) => (
                                        <a
                                            href={subitem.link}
                                            class={`block px-4 py-2.5 text-sm rounded-lg transition-colors duration-200
                      ${
                          currentPath === subitem.link
                              ? "text-primary-600 bg-primary-50"
                              : "text-neutral-900 hover:text-primary-600 hover:bg-neutral-50"
                      }`}
                                        >
                                            {subitem.name}
                                        </a>
                                    ))}
                                </div>
                            </div>
                        ) : (
                            <a
                                href={item.link}
                                class={`block px-4 py-3 text-base font-medium rounded-lg transition-colors duration-200
                ${
                    currentPath === item.link
                        ? "text-primary-600 bg-primary-50"
                        : "text-neutral-900 hover:text-primary-600 hover:bg-neutral-50"
                }`}
                            >
                                {item.name}
                            </a>
                        )}
                    </div>
                ))
            }

            <div class="pt-4">
                <a
                    href="/contacto"
                    class="block w-full px-4 py-3 bg-primary-600 text-white text-center text-base font-medium rounded-lg hover:bg-primary-700 transition-colors duration-200 shadow-sm"
                >
                    Solicitar Presupuesto
                </a>
            </div>
        </div>
    </div>
</nav>

<script>
    function initNavSlider() {
        const desktopNav = document.getElementById('desktop-nav');
        const slider = desktopNav?.querySelector('.nav-bg-slider') as HTMLElement;
        const navLinks = desktopNav?.querySelectorAll('.nav-link') as NodeListOf<HTMLElement>;

        if (!slider || !navLinks || navLinks.length === 0) return;

        // Encontrar el link activo
        const activeLink = Array.from(navLinks).find(link => 
            link.classList.contains('text-primary-600')
        );

        // Funci√≥n para mover el slider
        const moveSlider = (link: HTMLElement) => {
            const rect = link.getBoundingClientRect();
            const navRect = desktopNav!.getBoundingClientRect();
            
            slider.style.width = `${rect.width}px`;
            slider.style.height = `${rect.height}px`;
            slider.style.left = `${rect.left - navRect.left}px`;
            slider.style.top = `${rect.top - navRect.top}px`;
            slider.style.opacity = '1';
        };

        // Posicionar el slider en el elemento activo al cargar
        if (activeLink) {
            moveSlider(activeLink);
        }

        // A√±adir event listeners a cada link
        navLinks.forEach((link) => {
            link.addEventListener('mouseenter', () => {
                moveSlider(link);
            });
        });

        // Volver al elemento activo cuando el mouse sale del nav
        desktopNav?.addEventListener('mouseleave', () => {
            if (activeLink) {
                moveSlider(activeLink);
            } else {
                slider.style.opacity = '0';
            }
        });
    }

    function initMobileMenu() {
        // Mobile menu toggle
        const menuButton = document.getElementById("mobile-menu-button");
        const mobileMenu = document.getElementById("mobile-menu");
        const menuIcon = document.getElementById("menu-icon");
        const closeIcon = document.getElementById("close-icon");

        // Function to close mobile menu
        const closeMobileMenu = () => {
            const currentMenuButton = document.getElementById("mobile-menu-button");
            const currentMobileMenu = document.getElementById("mobile-menu");
            const currentMenuIcon = document.getElementById("menu-icon");
            const currentCloseIcon = document.getElementById("close-icon");
            
            if (currentMenuButton && currentMobileMenu && currentMenuIcon && currentCloseIcon) {
                currentMenuButton.setAttribute("aria-expanded", "false");
                currentMobileMenu.classList.add("hidden");
                currentMenuIcon.classList.remove("hidden");
                currentCloseIcon.classList.add("hidden");
            }
        };

        if (menuButton && mobileMenu && menuIcon && closeIcon) {
            // Remove any existing listeners by cloning the node
            const newMenuButton = menuButton.cloneNode(true) as HTMLElement;
            menuButton.parentNode?.replaceChild(newMenuButton, menuButton);

            newMenuButton.addEventListener("click", () => {
                const currentMobileMenu = document.getElementById("mobile-menu");
                const currentMenuIcon = document.getElementById("menu-icon");
                const currentCloseIcon = document.getElementById("close-icon");
                
                const isExpanded = newMenuButton.getAttribute("aria-expanded") === "true";
                newMenuButton.setAttribute("aria-expanded", (!isExpanded).toString());
                currentMobileMenu?.classList.toggle("hidden");
                currentMenuIcon?.classList.toggle("hidden");
                currentCloseIcon?.classList.toggle("hidden");
            });
        }

        // Mobile submenu toggles
        const submenuButtons = document.querySelectorAll(".mobile-submenu-button");
        submenuButtons.forEach((button) => {
            // Remove any existing listeners by cloning the node
            const newButton = button.cloneNode(true) as HTMLElement;
            button.parentNode?.replaceChild(newButton, button);

            newButton.addEventListener("click", () => {
                const submenuName = newButton.getAttribute("data-submenu");
                const submenu = document.querySelector(
                    `.mobile-submenu[data-submenu="${submenuName}"]`
                );
                const arrow = newButton.querySelector(".submenu-arrow");

                submenu?.classList.toggle("hidden");
                arrow?.classList.toggle("rotate-180");
            });
        });

        // Close mobile menu when clicking on a link
        const currentMobileMenu = document.getElementById("mobile-menu");
        const mobileLinks = currentMobileMenu?.querySelectorAll('a');
        mobileLinks?.forEach((link) => {
            link.addEventListener('click', () => {
                closeMobileMenu();
            });
        });
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
        initNavSlider();
        initMobileMenu();
    });
    
    // Initialize immediately if DOM is already loaded
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            initNavSlider();
            initMobileMenu();
        });
    } else {
        initNavSlider();
        initMobileMenu();
    }

    // Re-initialize after view transitions
    document.addEventListener('astro:after-swap', () => {
        setTimeout(() => {
            initNavSlider();
            initMobileMenu();
        }, 0);
    });

    // Re-initialize after page show (for back/forward navigation)
    document.addEventListener('astro:page-load', () => {
        initNavSlider();
        initMobileMenu();
    });
</script>

<style>
    /* Smooth transitions for dropdowns */
    .group:hover > div {
        display: block;
    }

    /* Custom border width for active state */
    .border-l-3 {
        border-left-width: 3px;
    }
</style>
